import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchArticle } from './articlesAPI';

export const initialState = {
  articleCollections: [],
  isLoaded: false,
  total: 0,
  authors: {
    isLoaded: false,
    data: [],
  },
  types: {
    isLoaded: false,
    data: [],
  },
  showOverlay: false,
  apiUrl: 'https://content-store.explore.bfi.digital/api/articles?page=1',
  page: 0,
  isFiltered: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(articleAsync(URL))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const articleAsync = createAsyncThunk(
  'article/fetchArticle',
  async (url) => {
    const response = await fetchArticle(url);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const authorsAsync = createAsyncThunk(
  'article/fetchAuthors',
  async (url) => {
    const response = await fetchArticle(url);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const typesAsync = createAsyncThunk(
  'article/fetchTypes',
  async (url) => {
    const response = await fetchArticle(url);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const filterArticleCollectionAsync = createAsyncThunk(
  'article/filterArticleCollection',
  async (url) => {
    const response = await fetchArticle(url);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const articleSlice = createSlice({
  name: 'article',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    // Use the PayloadAction type to declare the contents of `action.payload`

    changeApiUrl: (state, action) => {
      return {
        ...state,
        apiUrl: action.payload,
      };
    },
    toggleOverlay: (state) => {
      return {
        ...state,
        showOverlay: !state.showOverlay,
      };
    },
    setCurrentPage: (state, action) => {
      return {
        ...state,
        page: action.payload,
      };
    },
    toggleIsFiltered: (state, action) => {
      return {
        ...state,
        isFiltered: action.payload,
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(articleAsync.pending, (state) => {
        state.isLoaded = false;
      })
      .addCase(articleAsync.fulfilled, (state, action) => {
        return {
          ...state,
          articleCollections: action.payload.data,
          isLoaded: true,
          total: action.payload.meta.total,
        };
      });
    builder
      .addCase(authorsAsync.pending, (state) => {
        state.authors.isLoaded = false;
      })
      .addCase(authorsAsync.fulfilled, (state, action) => {
        return {
          ...state,
          authors: {
            isLoaded: true,
            data: action.payload.data,
          },
        };
      });
    builder
      .addCase(typesAsync.pending, (state) => {
        state.types.isLoaded = false;
      })
      .addCase(typesAsync.fulfilled, (state, action) => {
        return {
          ...state,
          types: {
            isLoaded: true,
            data: action.payload.data,
          },
        };
      });
    builder
      .addCase(filterArticleCollectionAsync.pending, (state) => {
        state.isLoaded = false;
      })
      .addCase(filterArticleCollectionAsync.fulfilled, (state, action) => {
        return {
          ...state,
          articleCollections: action.payload.data,
          isLoaded: true,
          total: action.payload.meta.total,
          showOverlay: false,
          isFiltered: true,
          page: 0,
        };
      });
  },
});

export const {
  toggleOverlay,
  setCurrentPage,
  changeApiUrl,
  toggleIsFiltered,
} = articleSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const getArticleCollections = (state) =>
  state.articles.articleCollections;
export const getIsLoaded = (state) => state.articles.isLoaded;
export const getTotal = (state) => state.articles.total;
export const getAllAuthors = (state) => state.articles.authors;
export const getAllTypes = (state) => state.articles.types;
export const showOverlay = (state) => state.articles.showOverlay;
export const getCurrentPage = (state) => state.articles.page;
export const getApiUrl = (state) => state.articles.apiUrl;
export const getIsFiltered = (state) => state.articles.isFiltered;

export default articleSlice.reducer;
